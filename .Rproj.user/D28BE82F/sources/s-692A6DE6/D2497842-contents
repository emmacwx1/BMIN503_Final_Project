---
title: "Data Analysis Workflow Example Using MEM on PBMC Cell Data (t-SNE, UMAP, FlowSOM, MEM, RMSD)"
author: "Copyright (c) 2016-2019 by Kirsten Diggins, Sierra Barone, and Jonathan Irish, All Rights Reserved; see EULA-MEM.text for MEM license information"
date: "March 7, 2019"
output:
  html_document:
    df_print: paged
  pdf_document:
    latex_engine: xelatex
editor_options:
  chunk_output_type: inline
---
```{r setup, include=FALSE}
# Load all libraries
# If you get an error message, you will need to try re-installing packages
library(FlowSOM)
library(flowCore)
library(Biobase)
library(gplots)
library(ggplot2)
library(hexbin)
library(MEM)
library(tidyverse)
library(Rtsne)
library(uwot)
library(viridis)
library(ggExtra)
```

```{r MEM on Fig.1 Data, warning=FALSE}
# read FCS files into R
setwd("C:/Users/Emma/Downloads/test2")

file2 <- dir(pattern = "*.fcs")


#all.data = read.FCS(file2, transformation="linearize", which.lines=NULL,
         #alter.names=FALSE, column.pattern=NULL, invert.pattern = FALSE,
         #decades=0, ncdf = FALSE, min.limit=NULL, 
         #truncate_max_range = TRUE, dataset=NULL, emptyValue=TRUE, 
         #channel_alias = NULL)

#colnames(all.data)
#markernames(all.data)

#class(file2)
#str(file2)
#summary(file2)

#files.test <-  dir("C:/Users/Emma/Downloads/test2")
#file.test.1a = read.FCS("C:/Users/divij/Desktop/MEMv3-master/datafiles/my_data_files/test/exportP2_P3m2_1.fcs")

#is.na(files.testa)

#markers <- markernames(files)

#all.data <-read.flowSet(path=getwd())

#markers 
#note: not a function itself outside MEM, could not run just with "markers"
#to test what is are the markers in the current file

#Run MEM on the manually gated populations (each FCS files is a pop) from paper
MEM.values.orig = MEM(
  file2,
  transform = TRUE, 
  #whether or not to apply asinh transformation to the data. default is FALSE
  cofactor = 1,    
  #if transform is TRUE, what cofactor should be applied. default is 1. Arcsinh transformed value = arcsinh(raw value/cofactor)
  choose.markers = FALSE, 
  #TRUE=data contains markers that will NOT be used in the analysis (e.g. SSC or FSC channels in flow data)
  #FALSE, either all markers in exp will be used in MEM or the user can pass a character string of the markers to be used in the analysis using the function call (markers) below
  markers = "7:31",    
  #all or column index 
  choose.ref = FALSE,   
  #default reference for each population is all other popultaions.any clusters you want to use as reference?? possible landmark pop if wanted 
  zero.ref = FALSE,   
  #TRUE=a zero, or synthetic negative, referece will be used for all populations. MAGref therefore is 0 and IQRref is the median IQR across all markers chosen. 
  rename.markers = FALSE,   
  #if false, either column names will not be changed or the user can pass a character string of the new column names using the function call (new.marker.names) below
  new.marker.names = "CD45RA,CXCR5,PD1,IgG4,dump,CD8,CD127,Tox,Tim3,Eomes,TCF1,CD38,CCR7,CTLA4,CD69,CD103,FoxP3,Ki67,CD27,CD4,CX3CR1,CD39,T-bet,CD28,CD6",
  file.is.clust = TRUE,   
  #TRUE=multiple files are entered, each file contains cells from only 1 cluster. 
  #will merge data into one matrix for analysis and to add a file ID for each file that will stand in as the cluster ID (??cluster=file?) output=a text file indicating which file corresponds to which cluster number will be written to the output files folder 
  add.fileID = FALSE,  
  #multi files, but not 1 file = 1 cluster; instead, 1 file contains multiple cluster, and that there is already a cluster channel included as the last column in each file. 
  ##QUESTION: what if 1 file does has multiple clusters, but there is no cluster channel included as the last column in each file? 
  #if TRUE, a file ID will be appended to the cluster ID so user can ID the file as well as cluster from which each population came.  
  IQR.thresh = NULL
)

MEM.values.orig$MEM_matrix  #visualize MEM score for each marker

# build MEM heatmap and output enrichment scores
build.heatmaps(
  MEM.values.orig,
  cluster.MEM = "both",
  display.thresh = 1,
  newWindow.heatmaps = FALSE,
  output.files = FALSE,
  labels = TRUE,
  only.MEMheatmap = FALSE
)

# prepare data for use in UMAP
data <- lapply(lapply(file2, read.FCS), exprs) #list apply to read FCS file (read.FCS) and to make it readable (exprs), return list for UMAP. apply takes in 3 arguments: 1 data matrix, 2 row/column operation, function to be applied 
ID <- c(1:length(data)) #ID for each file as files are in object (data) now
combined.data = as.data.frame(do.call(rbind, mapply(
  cbind, data, "File ID" = ID, SIMPLIFY = F
)))
combined.data$`File ID` <- as.numeric(combined.data$`File ID`)
chosen.markers = combined.data[, c(7:31)]
transformed.chosen.markers <- chosen.markers %>%
  mutate_all(function(x)
    asinh(x / 15))
overall_seed = 43 
#FlowSOM algorithm is a randonly determined process.

#set the seed of pseudorandom number generator in the computer to repeat the same FlowSOM run on the SAME DATA with the SAME setting and get the exact SAME RESULTS. 

#to validate reproducibility where required.

#choose the seed? Cytobank will set one for you if you run FlowSOM on Cytobank. you can see the seed that was selected by viewing the settings that were used for the FlowSOM run. 

#CytoBank link (search "seed"): https://support.cytobank.org/hc/en-us/articles/360015918512-How-to-Configure-and-Run-a-FlowSOM-Analysis
```


```{r UMAP}
# Run UMAP on all surface markers
set.seed(overall_seed)
myumap <-
  umap(transformed.chosen.markers,
       ret_model = TRUE,
       n_threads = 1, 
       verbose = TRUE)
umap.data = as.data.frame(myumap$embedding)

range <- apply(apply(umap.data, 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])

# UMAP flat dot plot and density dot plot
UMAP.plot <- data.frame(x = umap.data[, 1], y = umap.data[, 2])

ggplot(UMAP.plot) + coord_fixed(ratio = graphical.ratio) + 
  geom_point(aes(x = x, y = y), cex = 1) + labs(x = "UMAP 1", y = "UMAP 2", 
                                                title = "UMAP on PBMC Data") + 
  theme_bw() + 
  labs(caption = "Data from Digggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63")

ggplot(UMAP.plot, aes(x = x, y = y)) + coord_fixed(ratio = graphical.ratio)  + 
  geom_bin2d(bins = 128) +
  scale_fill_viridis_c(option = "A", trans = "sqrt") + 
  scale_x_continuous(expand = c(0.1, 0)) +
  scale_y_continuous(expand = c(0.1, 0)) + labs(x = "UMAP 1", y = "UMAP 2", 
                                                title = "UMAP on PBMC Data") + 
  theme_bw() + 
  labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63")
```


```{r FlowSOM on UMAP}
# Run FlowSOM on the UMAP axes
umap.matrix <- as.matrix(umap.data)

# create flowFrame
UMAP.metadata <-
  data.frame(name = dimnames(umap.matrix)[[2]],
             desc = paste('UMAP', dimnames(umap.matrix)[[2]]))
UMAP.metadata$range <- apply(apply(umap.matrix, 2, range), 2, diff)
UMAP.metadata$minRange <- apply(umap.matrix, 2, min)
UMAP.metadata$maxRange <- apply(umap.matrix, 2, max)
umap.flowframe <- new("flowFrame",
                      exprs = umap.matrix,
                      parameters = AnnotatedDataFrame(UMAP.metadata))

# implement the FlowSOM on the data
fsom <-
  FlowSOM(
    umap.flowframe,
    compensate = FALSE,
    transform = FALSE,
    toTransform = c(1:2),
    scale = TRUE,
    colsToUse = c(1:2),
    nClus = 20, #change this
    seed = overall_seed
  )
FlowSOM.clusters <-
  as.matrix(fsom[[2]][fsom[[1]]$map$mapping[, 1]])

# plot FlowSOM clusters on UMAP axes
ggplot(UMAP.plot) + coord_fixed(ratio=graphical.ratio) + 
  geom_point(aes(x=x, y=y, color=FlowSOM.clusters),cex = 1.5) + 
  labs(x = "UMAP 1", y = "UMAP 2",title = "FlowSOM Clustering on UMAP Axes", 
       color = "FlowSOM Cluster") + theme_bw() + 
  guides(colour = guide_legend(override.aes = list(size=5)))+
  labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63")
```

```{r MEM on UMAP/FlowSOM Clusters}
# Run MEM on the FlowSOM clusters from UMAP
cluster = as.numeric(as.vector((FlowSOM.clusters)))
MEM.data = cbind(transformed.chosen.markers, cluster)

MEM.values.uf = MEM(
  MEM.data,
  transform = FALSE,
  cofactor = 15,
  choose.markers = FALSE,
  markers = "all",
  choose.ref = FALSE,
  zero.ref = FALSE,
  rename.markers = FALSE,
  new.marker.names = "CD45RA,CXCR5,PD1,IgG4,dump,CD8,CD127,Tox,Tim3,Eomes,TCF1,CD38,CCR7,CTLA4,CD69,CD103,FoxP3,Ki67,CD27,CD4,CX3CR1,CD39,T-bet,CD28,CD6",
  file.is.clust = FALSE,
  add.fileID = FALSE,
  IQR.thresh = NULL
)

# build MEM heatmap and output enrichment scores
build.heatmaps(
  MEM.values.uf,
  cluster.MEM = "both",
  cluster.medians = "none",
  display.thresh = 1,
  newWindow.heatmaps = FALSE,
  output.files = FALSE,
  labels = TRUE,
  only.MEMheatmap = FALSE
)
```


```{r RMSD for All Clusters}
# RMSD to compare labels from all populations
orig.MEM.scores = as.data.frame(MEM.values.orig[[5]])
rownames(orig.MEM.scores) = paste0(rownames(orig.MEM.scores), " (Fig.1)")
uf.MEM.scores = as.data.frame(MEM.values.uf[[5]])
rownames(uf.MEM.scores) = paste0(rownames(uf.MEM.scores), ' (UMAP)')
all.MEM.values = as.matrix(rbind(uf.MEM.scores, orig.MEM.scores))

RMSD_vals <-
  MEM_RMSD(
    all.MEM.values,
    format = NULL,
    newWindow.heatmaps = FALSE,
    output.matrix = FALSE
  )
```
